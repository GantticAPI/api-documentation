openapi: 3.0.0
info:
  description: |
    [www.ganttic.com](https://www.ganttic.com)
    
    # Description
    Ganttic API allows programmatic access to Ganttic resources, tasks, projects and users. It is intended to access your data programmatically for integration with your in-house applications or integrations with third party applications. Ganttic API follows RESTful style and uses JSON data format.

    Ganttic API root URL is https://planner.ganttic.com/api/v1. ‘v1’ is the version number. All requests to the API must be made over HTTPS. This reference lists all available endpoints and their descriptions. 

    # Authentication 
    Each request to the Ganttic API is authorized by an API token. This token must be sent with each request as a "token" query parameter. An account administrator can obtain the token from [the web interface](https://planner.ganttic.com) under Settings > API. If the authentication token is not contained in the request or is invalid then the server will return an Unauthorized (401) response.
    
    **NOTE** - If you already have a token and generate a new one then the old token will be discontinued immediately and will no longer function in any existing systems you might have running.
    
    # Data format
    All requests and responses are in JSON format. Nonexistent values are given as null values.
    
    ### Date & time formatting
    All dates and times used by the API are in the format of YYYY-MM-DD hh:mm:ss. In certain cases the API will not return a time component or will ignore the time component in the request. Details for specific requests are given below.
    
    ### Responses
    All successful requests will return a Success (200) response along with a response body if appropriate. Unsuccessful requests will return a 4XX or 5XX response code along with an error object containing the error code and error description.
    
    # Pagination
    Pagination is used in all GET requests that return an array of objects. Each response includes page and pageCount parameters. Page can be specified as a query parameter, pageCount is the number of total pages. Pages are 1-indexed and the page parameter defaults to 1. Page size is 50.
    
    # Webhooks
    Webhooks allow external services to be notified when certain events happen. When the specified events happen, we’ll send a POST request to each of the URLs you provide. You can configure webhooks under Settings > API. For each webhook you can set a symbolic name and an endpoint where the data will be sent. You can also set the types of events you want to receive as any combination of task/resource/project add/update/delete.
    
    ## Request format
    Events are sent as a POST request. The request body contains an array of message objects containing one or more messages as well as your API token to verify the authenticity of the request. You can see the exact format of the request body in the Models section of this document.
    
    ## Handling the requests
    Each webhook request expects a response with a 200 HTTP status code. We ask that you respond to the request before doing any processing of the data. This assures that each message is only sent once and saves both your and our bandwidth and processing power.
    
    ## Failed requests
    If a webhook message request does not recieve a response in a timely manner or receives a response with a status code other than 200 it will be retried several times. These retries follow an exponential backoff, meaning that each retry will happen at larger interval than the previous. After 16 failed requests, which are in total spread over 3 days, the message is marked as failed and no more retries will be attempted.
    
    ## Grouping
    Events that happen within one send interval are grouped together in one request rather than sent individually. This message group may also contain messages for events that did not happen within the interval, but have failed to be delivered previously.
    
    ## Exemptions
    Some event messages are exempt from being sent. These cases are:
      * Several update events have happened to the same object within the send interval. In this case only the latest update event is sent.
      * When deleting a resource or a project all the tasks assigned to the resource or contained in the project are also deleted. In that case a delete message is sent for the resource or the project, but not the tasks. This is to prevent overloading your sever with potentially hundreds or thousands of delete events.
      
    ## Data integrity
    In some cases where your server takes too long to respond, it is possible that a message is delivered multiple times. For those cases each message object contains a unique id, so you can easily tell which messages you have already handled and save resources on processing them again.
      
  version: 1.0.1
  title: Ganttic API
  termsOfService: 'https://www.ganttic.com/terms-and-conditions'
  contact:
    email: info@ganttic.com
  x-logo:
    url: './Ganttic_logotype_blue.svg'
    altText: Ganttic logo
tags:
  - name: resource
    x-displayName: Resource
    description: A resource in Ganttic represents anyone or anything that should be planned or booked in order to complete a project. You can learn more about resources [here](https://www.ganttic.com/helpdesk/features/resources).
  - name: task
    x-displayName: Task
    description: A task is an assignment for a resource, whether it's a booking, a job or something else. You can learn more about tasks [here](https://www.ganttic.com/helpdesk/features/tasks).
  - name: project
    x-displayName: Project
    description: Projects might be the reason you're planning your resources. In that case, this is the place to look for projects that are ongoing. To see which tasks a certain project contains, look into the tasks section. You can learn more about projects [here](https://www.ganttic.com/helpdesk/features/projects).
  - name: user
    x-displayName: User
    description: Users are the users of Ganttic, not resources. Though this may not be mutually exclusive, a separate resource must be created for the person to assign them tasks. Users are identified by the automatically generated id, and also a unique email address, which is used to log into Ganttic's web application.
  - name: datafield
    x-displayName: Datafield
    description: "Resources, tasks and projects can all contain data fields. There are six types of data fields in total: users, dates, numbers,  texts, links and listValues. The data fields are grouped by type in the dataFields object. Data fields are account wide, meaning that     each resource/task/project has identical data fields to other resources/tasks/projects. However, not each of them has a value for each data field. You can strip out empty data fields from list queries by setting the value of the includeEmptyDataFields to 0. You can use one of the queries below to fetch all data fields for resources/tasks/projects. Requests for resources/projects/tasks also contain data fields and their respective values for each resource/task/project. You can select whether to include data fields with no value via the includeEmptyDataFields query parameter."
  - name: resource_model
    x-displayName: Resource model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ResourceGet"/>
  - name: task_model
    x-displayName: Task model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/TaskGet"/>
  - name: project_model
    x-displayName: Project model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/ProjectGet"/>
  - name: user_model
    x-displayName: User model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/UserSchema"/>
  - name: datafields_model
    x-displayName: Datafields model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/DataFields"/>
  - name: webhook_model
    x-displayName: Webhook request body
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/WebhookRequestBody"/>
x-tagGroups:
  - name: Requests
    tags:
      - resource
      - task
      - project
      - user
      - datafield
  - name: Models
    tags:
      - resource_model
      - task_model
      - project_model
      - user_model
      - datafields_model
      - webhook_model
servers:
  - url: https://planner.ganttic.com/api/v1
paths:
  /resources:
    parameters:
      - name: token
        in: query
        description: API token.
        required: true
        schema:
          type: string
    get:
      tags:
        - resource
      summary: Get all resources
      parameters:
        - name: includeArchived
          in: query
          description: Include archived tasks in the result.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeNotes
          in: query
          description: Include notes in result.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeReadableDataFieldValues
          in: query
          description: Include human readable values for data fields in the result.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: page
          in: query
          description: The result is returned in pages, with 50 rows per page. The parameter page indicates which page you want to retrieve. <br>
              Example:<br>
                if `page` = 1 returns rows 1-50<br>
                if `page` = 2 returns rows 51-100<br>
                ....<br>
                if `page` = -1 returns all records on a single page from 1 to n rows          
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          $ref: '#/components/responses/Resources'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  '/resources/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - datafield
      summary: Get all resource data fields
      responses:
        '200':
          $ref: '#/components/responses/DataFields'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  /resource:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - resource
      summary: Create a resource
      requestBody:
        $ref: '#/components/requestBodies/ResourcePost'
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - resource
      summary: Modify a resource
      requestBody:
        $ref: '#/components/requestBodies/ResourcePatch'
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  '/resource/{resourceId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Id of the resource
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - resource
      summary: Get resource details
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - resource
      summary: Delete a resource
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  /tasks:
    parameters:
    - name: token
      in: query
      description: API token
      required: true
      schema:
        type: string
    - name: includeUnassigned
      in: query
      description: Include unassigned tasks in the result.
      required: false
      schema:
        type: integer
        enum: [0, 1]
        default: 0

    get:
      tags:
        - task
      summary: Get all tasks matching query parameters
      parameters:
        - name: timeMin
          in: query
          description: Start date of task range (YYYY-MM-DD hh:mm).
          required: true
          schema:
            type: string
            format: date-time
            example: 2020-01-01 20:20
        - name: timeMax
          in: query
          description: End date of task range (YYYY-MM-DD hh:mm).
          required: true
          schema:
            type: string
            format: date-time
            example: 2020-01-01 20:20
        - name: includeArchived
          in: query
          description: Include archived tasks in the result.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeNotes
          in: query
          description: Include notes in the result.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in the result.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeReadableDataFieldValues
          in: query
          description: Include human readable values for data fields in the result.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeDependencies
          in: query
          description: Include task dependencies.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0            
        - name: onlyHolidays
          in: query
          description: Get holiday (Time Off, All Resources’ Time Off) and public holiday type tasks. If this value is true, then all other tasks will be excluded from the response.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: page
          in: query
          description: The result is returned in pages, with 50 rows per page. The parameter page indicates which page you want to retrieve. <br>
              Example:<br>
                if `page` = 1 returns rows 1-50<br>
                if `page` = 2 returns rows 51-100<br>
                ....<br>
                if `page` = -1 returns all records on a single page from 1 to n rows
          required: false
          schema:
            type: integer
            default: 1
        - name: projectId
          in: query
          description: Project id of the tasks.
          required: false
          schema:
            type: string
            default: null
        - name: resourceId
          in: query
          description: Resource id of the tasks.
          required: false
          schema:
            type: string
            default: null
        - name: recurringId
          in: query
          description: Recurring id of the tasks.
          required: false
          schema:
            type: string
            default: null
        - name: timeZone
          in: query
          description: IANA name of the time zone into which resulting task start and end times are converted. For example, "Europe/Tallinn".
          required: false
          schema:
            type: string
            default: null
      responses:
        '200':
          $ref: '#/components/responses/Tasks'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  '/tasks/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - datafield
      summary: Get all task data fields
      responses:
        '200':
          $ref: '#/components/responses/DataFields'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  /task:
    parameters:
    - name: token
      in: query
      description: API token
      required: true
      schema:
        type: string
    post:
      tags:
        - task
      summary: Create a task
      parameters:
        - name: token
          in: query
          description: API token
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/TaskPost'
      responses:
        '200':
          $ref: '#/components/responses/Task'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - task
      summary: Modify a task
      parameters:
        - name: token
          in: query
          description: API token
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/TaskPatch'
      responses:
        '200':
          $ref: '#/components/responses/Task'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  '/task/{taskId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: Id of the task
        required: true
        schema:
          type: string
      - name: timeZone
        in: query
        description: IANA name of the time zone into which resulting task start and end times are converted. For example "Europe/Tallinn".
        required: false
        schema:
          type: string
          default: null
    get:
      tags:
        - task
      summary: Get task details
      parameters:
        - name: includeDependencies
          in: query
          description: Include task dependencies.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0                
      responses:
        '200':
          $ref: '#/components/responses/Task'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - task
      summary: Delete a task
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  '/task/{taskId}/usedtime':
    post:
      tags:
        - task
      summary: Add a task used time interval
      parameters:
        - name: taskId
          in: path
          description: Id of the task
          required: true
          schema:
            type: string
        - name: token
          in: query
          description: API token
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/TaskUsedTimePost'
      responses:
        '200':
          $ref: '#/components/responses/TaskUsedTime'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  /projects:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: templates
        in: query
        description: Returns only template projects.
        required: false
        schema:
          type: integer
          enum: [0, 1]
          default: 0
    get:
      tags:
        - project
      summary: Get all projects
      parameters:
        - name: includeArchived
          in: query
          description: Include archived tasks in the result.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeNotes
          in: query
          description: Include notes in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeReadableDataFieldValues
          in: query
          description: Include human readable values for data fields in the result.
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: projectTitle
          in: query
          description: Returns only projects whose name-title matches the given string. It is case-insensitive and searches for a part of the name-title.
          required: false
          schema:
            type: string
            default: null
        - name: page
          in: query
          description: The result is returned in pages, with 50 rows per page. The parameter page indicates which page you want to retrieve. <br>
              Example:<br>
                if `page` = 1 returns rows 1-50<br>
                if `page` = 2 returns rows 51-100<br>
                ....<br>
                if `page` = -1 returns all records on a single page from 1 to n rows
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          $ref: '#/components/responses/Projects'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  '/projects/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - datafield
      summary: Get all project data fields
      responses:
        '200':
          $ref: '#/components/responses/DataFields'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  /project:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - project
      summary: Create a project
      requestBody:
        $ref: '#/components/requestBodies/ProjectPost'
      responses:
        '200':
          $ref: '#/components/responses/Project'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - project
      summary: Modify a project
      requestBody:
        $ref: '#/components/requestBodies/ProjectPatch'
      responses:
        '200':
          $ref: '#/components/responses/Project'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  '/project/{projectId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: projectId
        in: path
        description: Id of the project
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - project
      summary: Get project details
      responses:
        '200':
          $ref: '#/components/responses/Project'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - project
      summary: Delete a project
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  /users:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - user
      summary: Get all users
      parameters:
        - name: page
          in: query
          description: Page of users to get
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  /user:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - user
      summary: Create a user
      requestBody:
        $ref: '#/components/requestBodies/UserPost'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - user
      summary: Modify a user
      requestBody:
        $ref: '#/components/requestBodies/UserPatch'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
  '/user/{userId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: Id of the user
        required: true
        schema:
          type: string
    get:
      tags:
        - user
      summary: Get user details
      responses:
        '200':
          $ref: '#/components/responses/User'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - user
      summary: Delete a user
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
components:
  schemas:
    ResourceList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ResourceGet'
          description: A list of resources
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    Resource:
      type: object
      properties:
        name:
          type: string
          description: Name of the resource.
          minLength: 1
        status:
          type: string
          enum: [resource, archived]
          default: resource
          description: Status of the resource. One of either "resource" for a regular resource or "archived" for a read-only archived resource.
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: List of notes attached to the resource.
          readOnly: true
        created:
          type: string
          format: date-time
          example: 2020-01-01 20:20
          description: The date the resource was created. (YYYY-MM-DD hh:mm).
          readOnly: true
        updated:
          type: string
          format: date-time
          example: 2020-01-01 20:20
          description: The date when the resource was last modified. (YYYY-MM-DD hh:mm).
          readOnly: true          
        color:
          type: string
          description: The resource's color and taskbar color is conveyed using a hexadecimal code, representing the color's RGB (Red, Green, Blue) values. It consists of six characters.
          nullable: true          
        dataFields:
          $ref: '#/components/schemas/DataFieldValues'
      required:
        - name
    ResourceGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        id:
          type: string
          description: Id of the resource. This is a read-only value and is assigned when a resource is created.
    ResourcePost:
      allOf:
        - $ref: '#/components/schemas/Resource'
    ResourcePatch:
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        id:
          type: string
          description: Id of the resource. This is a read-only value and is assigned when a resource is created.
      required: 
        - id
        - name
    TaskList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TaskGet'
          description: A list of tasks
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    Task:
      type: object
      properties:
        projectId:
          type: string
          description: Id of the project the task belongs in.
          nullable: true
        name:
          type: string
          description: Name of the task.
          nullable: true
        resources:
          type: array
          items:
            type: string
          minItems: 1
          description: List of resource ids the task is assigned to. At least one resource id is required when creating or modifying a task unless the task status is "public_holiday" in which case it is automatically assigned to all resources. Id "0" refers to the "UNASSIGNED" resource.
        start:
          type: string
          format: date-time
          example: 2020-01-01 20:20
          description: Start time of the task YYYY-MM-DD if allDay=true YYYY-MM-DD hh:mm otherwise. 00:00 denotes the midnight at the start of the day, 24:00 midnight at the end of the day.
        end:
          type: string
          format: date-time
          example: 2020-01-01 20:20
          description: End time of the task YYYY-MM-DD if allDay=true YYYY-MM-DD hh:mm otherwise. 00:00 denotes the midnight at the start of the day, 24:00 midnight at the end of the day.
        allDay:
          type: boolean
          description: Whether this is an all day task. This changes the start and end date format to either include or exclude time values.
          default: false
        usedTime:
          type: integer
          format: int64
          description: Total task used time in minutes. This value can only be modified through the API and __on doing so all existing used time intervals will be deleted__.
          default: 0
        usedTimeIntervals:
          type: array
          items:
            $ref: '#/components/schemas/TaskUsedTimeGet'
          readOnly: true
          description: Used time intervals for the task.
        recurringId:
          type: string
          description: Id of the recurring set the task is in.
          default: null
        utilizationPercent:
          type: integer
          format: int32
          description: Utilization percent of the task. This value is null if the task is using timing based utilization.
          default: 100
        color:
          type: string
          description: The task's color and taskbar color is conveyed using a hexadecimal code, representing the color's RGB (Red, Green, Blue) values. It consists of six characters.
          nullable: true
        dataFields:
          $ref: '#/components/schemas/DataFieldValues'
      required:
        - start
        - end
        - resources
    TaskGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/Task'
      properties:
        id:
          type: string
          description: Id of the task. This is a read-only value and is assigned automatically when a task is created.
          readOnly: true
        status:
          type: string
          enum: [task, archived, holiday, public_holiday]
          default: task
          description: Status of the task. Use "task" for a regular task, "archived" for an archived read-only task, "holiday" for custom time-off such as Time Off type tasks and resource specific public holidays, or "public_holiday" for planner-wide imported public holidays or All Resources’ Time Off tasks. When creating or modifying a task only "task", "holiday" and "public_holiday" values are accepted. A task is archived once its corresponding project is archived.
        resourceUtilizationPercent:
          type: array
          items:
            $ref: '#/components/schemas/ResourceUtilizationPercent'
          description: List of utilization percentages for each resource assigned to the task. This value is null if the task is using percentage based utilization.
          readOnly: true
        utilizationMinutes:
          type: integer
          format: int32
          description: Busy time of the task in minutes. This value is null if the task is using percentage based utilization.
          readOnly: true
        resourceUtilizationMinutes:
          type: array
          items:
            $ref: '#/components/schemas/ResourceUtilizationTime'
          description: List of busy time values for each resource assigned to the task. This value is null if the task is using timing based utilization.
          readOnly: true
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          readOnly: true
          description: List of notes attached to the task.
        created:
          type: string
          format: date-time
          example: 2020-01-01 20:20
          readOnly: true
          description: Date the task was created YYYY-MM-DD hh:mm
        updated:
          type: string
          format: date-time
          example: 2020-01-01 20:20
          description: The date when the task was last modified. (YYYY-MM-DD hh:mm).
          readOnly: true          
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/Dependencies'
          description: List of task dependencies.
          readOnly: true
          
    TaskPost:
      type: object
      allOf:
        - $ref: '#/components/schemas/Task'
      properties:
        status:
          type: string
          enum: [task, archived, holiday, public_holiday]
          default: task
          description: Status of the task. Use "task" for a regular task, "archived" for an archived read-only task, "holiday" for custom time-off such as Time Off type tasks and resource specific public holidays, or "public_holiday" for planner-wide imported public holidays or All Resources’ Time Off tasks. When creating or modifying a task only "task", "holiday" and "public_holiday" values are accepted. A task is archived once its corresponding project is archived.
        timeZone:
          type: string
          nullable: true
          default: null
          description: IANA name of the time zone of the task's start and end times. For example "Europe/Tallinn".
      required:
        - start
        - end
        - resources
    TaskPatch:
      type: object
      allOf:
        - $ref: '#/components/schemas/Task'
      properties:
        id:
          type: string
          description: Id of the task.
        timeZone:
          type: string
          default: null
          description: IANA name of the time zone of the task's start and end times. For example "Europe/Tallinn".
      required:
        - id
        - start
        - end
        - resources
    ProjectList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectGet'
          description: A list of projects
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    Project:
      type: object
      properties:
        name:
          type: string
          description: Name of the project.
          minLength: 1
        status:
          type: string
          enum: [project, archived]
          default: project
          description: Status of the project. One of either "project" for a regular project or "archived" for a read-only archived project. When the project is archived all the tasks in the project will be archived automatically.
        color:
          type: string
          description: The project's color and taskbar color is conveyed using a hexadecimal code, representing the color's RGB (Red, Green, Blu) values. It consists of six characters.
          nullable: true
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: List of notes attached to the project.
          readOnly: true
        created:
          type: string
          format: date-time
          description: The date the project was created (YYYY-MM-DD hh:mm).
          example: 2020-01-01 20:20
          readOnly: true
        updated:
          type: string
          format: date-time
          example: 2020-01-01 20:20
          description: The date when the project was last modified. (YYYY-MM-DD hh:mm).
          readOnly: true              
        dataFields:
          $ref: '#/components/schemas/DataFieldValues'
      required:
        - name
    ProjectGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/Project'
      properties:
        id:
          type: string
          description: Id of the project. This value is assigned when a project is created.
    ProjectPost:
      type: object
      allOf:
        - $ref: '#/components/schemas/Project'
    ProjectPatch:
      type: object
      allOf:
        - $ref: '#/components/schemas/Project'
      properties:
        id:
          type: string
          description: Id of the project. This value is assigned when a project is created.
      required: 
        - id
        - name
    UserList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserGet'
          description: A list of users
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    User:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the user.
        surname:
          type: string
          description: Surname of the user.
        email:
          type: string
          format: email
          description: Email of the user.
        type:
          type: string
          enum: [user, admin]
          description: Type of the user. Either "user" for a regular user or "admin" for an administrator. This sets a basic permissions template when creating a user. The permissions can be fine-tuned in the web interface.
        created:
          type: string
          format: date-time
          example: 2020-01-01 20:20
          description: Date the user was created (YYYY-MM-DD hh:mm).
          readOnly: true
      required:
        - email
    UserGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
      properties:
        id:
          type: string
          description: Id of the user.
    UserPost:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
      properties:
        password:
          type: string
          description: Password of the user. This is a write-only property included in the request when creating a user and will not be returned with GET requests.
      required:
        - password
    UserPatch:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
      properties:
        id:
          type: string
          description: Id of the user.
      required: 
        - id
        - email

#    UserSchema:
#      type: object
#      allOf:
#        - $ref: '#/components/schemas/UserGet'
#        - properties:
#            password:
#              type: string
#              description: Password of the user. This is a write-only property included in the request when creating a user and will not be returned with GET requests.

    DataFieldValues:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldUserValue'
          description: List of user type data fields
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldDateValue'
          description: List of date type data fields
        numbers:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldNumberValue'
          description: List of number type data fields
        texts:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldTextValue'
          description: List of text type data fields
        links:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldLinkValue'
          description: List of link type data fields
        listValues:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldListValue'
          description: List of list type data fields

    DataFieldValue:
      type: object
      properties:
        id:
          type: string
          description: Id of the data field
        readableValue:
          type: string
          description: Human readable value of the data field.
    DataFieldUserValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        userId:
          type: string
          description: Id of the user.
    DataFieldDateValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        date:
          type: string
          format: date-time
          example: 2020-01-01 20:20
          description: Date value (YYYY-MM-DD hh:mm).
    DataFieldNumberValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        number:
          type: string
          description: Number value in string format. Can be signed or unsigned integer or floating point number.
    DataFieldTextValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        text:
          type: string
          description: Text value
    DataFieldLinkValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        url:
          type: string
          format: url
          description: Url value
        text:
          type: string
          description: Text value
    DataFieldListValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        valueId:
          type: string
          description: Id of the current value of the list.

    DataFields:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldUser'
          description: List of user type data fields
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldDate'
          description: List of date type data fields
        numbers:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldNumber'
          description: List of number type data fields
        texts:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldText'
          description: List of text type data fields
        links:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldLink'
          description: List of link type data fields
        listValues:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldList'
          description: List of list type data fields

    DataField:
      type: object
      properties:
        id:
          type: string
          description: Id of the data field
        name:
          type: string
          description: Name of the data field
    DataFieldUser:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldDate:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldNumber:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldText:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldLink:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldList:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
      properties:
        values:
          type: array
          description: Possible values the list can have.
          items:
            $ref: '#/components/schemas/DataFieldListOption'
           
    DataFieldListOption:
      type: object
      properties:
        id:
          type: string
          description: Id of the list option.
        value:
          type: string
          description: Value of the list option.
         
    Note:
      type: object
      properties:
        id:
          type: string
          description: Id of the note.
        userId:
          type: string
          description: Id of the user that created the note.
        note:
          type: string
          description: Contents of the note.
        created:
          type: string
          format: date-time
          example: 2020-01-01 20:20
          description: Date the note was created (YYYY-MM-DD hh:mm).
    Dependencies:
      type: object
      properties:
        taskId:
          type: string
          description: Id of the task.
        type:
          type: string
          enum: [successor, predecessor]
          description: Task dependency type. Possible values are successor or predecessor.
        minGap:
          type: integer
          description: The minimum gap between two dependent tasks in minutes.
        lagType:
          type: string
          enum: [minimal, fixed]
          default: minimal
          description: Task dependency lag type.
        isLead:
          type: boolean
          enum: [false, true]
          default: false
          description: Indicates whether the given task is in a lead role in the dependency chain.          
    TaskUsedTime:
      type: object
      properties:
        usedTime:
          type: integer
          format: int32
          description: Used time in minutes.
        usedTimeDate:
          type: string
          format: date
          description: Date the time was used.
        description:
          type: string
          description: Description of the used time.
    TaskUsedTimeGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/TaskUsedTime'
        - properties:
            userId:
              type: string
              description: Id of the user who added the used time interval. NULL if this interval was added through the API.
            insertTime:
              type: string
              format: date
              description: Date the interval was added.
    TaskUsedTimePost:
      type: object
      allOf:
        - $ref: '#/components/schemas/TaskUsedTime'
    ResourceUtilizationPercent:
      type: object
      properties:
        resourceId:
          type: string
          description: Id of the resource.
        utilizationPercent:
          type: integer
          format: int32
          description: Utilization percent for that resource.
    ResourceUtilizationTime:
      type: object
      properties:
        resourceId:
          type: string
          description: Id of the resource.
        utilizationPercent:
          type: integer
          format: int32
          description: Busy time for that resource.
    WebhookRequestBody:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/WebhookMessage'
        apiToken:
          type: string
          description: Your API token for verifying the authenticity of the request.
    WebhookMessage:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique id of the message.
        actionTime:
          type: string
          format: date-time
          description: Time of the action (YYYY-MM-DD hh:mm).
        actionType:
          type: string
          enum: [I, U, D]
          description: I - insert, U - update, D - delete.
        resource:
          type: object
          allOf:
            - $ref: '#/components/schemas/Resource'
          description: The resource the event happened to. This key is not contained in the message if the event happened to a task or a project.
        task:
          type: object
          allOf:
            - $ref: '#/components/schemas/Task'
          description: The task the event happened to. This key is not contained in the message if the event happened to a resource or a project.
        project:
          type: object
          allOf:
            - $ref: '#/components/schemas/Project'
          description: The task the event happened to. This key is not contained in the message if the event happened to a resource or a task.
    ClientError:
      type: object
      properties:
        errorCode:
          type: string
          description: Error code
          enum: [TASK_NOT_FOUND, RESOURCE_NOT_FOUND, PROJECT_NOT_FOUND, USER_NOT_FOUND, DATAFIELD_NOT_FOUND, DATAFIELD_LIST_VALUE_NOT_FOUND, INVALID_TOKEN, INVALID_START_DATE, INVALID_END_DATE, INVALID_DATE, INVALID_NUMBER, INVALID_USER_TYPE, INVALID_JSON, INVALID_RESOURCE_NAME, INVALID_PROJECT_NAME, INVALID_PROPERTY_TYPE, NO_RESOURCES, SYNC_RESOURCE_DELETE, RESOURCE_LIMIT_EXCEEDED, USER_EXISTS, START_TIME_AFTER_END_TIME, UNRECOGNIZED_PROPERTY]
        message:
          type: string
          description: Error description
    ServerError:
      type: object
      properties:
        errorCode:
          type: string
          description: Error code
          enum: [UNKNOWN]
        message:
          type: string
          description: Error description
  requestBodies:
    TaskPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskPost'
    TaskPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskPatch'
    TaskUsedTimePost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskUsedTimePost'
    ResourcePost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourcePost'
    ResourcePatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourcePatch'
    ProjectPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectPost'
    ProjectPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectPatch'
    UserPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPost'
    UserPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPatch'
  responses:
    Task:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskGet'
    Tasks:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskList'
    TaskUsedTime:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskUsedTimeGet'
    Resource:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceGet'
    Resources:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceList'
    Project:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectGet'
    Projects:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectList'
    User:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserGet'
    Users:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserList'
    DataFields:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataFields'
    Dependencies:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dependencies'
            
    ClientError:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientError'
    ServerError:
      description: An unknown error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerError'