openapi: 3.0.0
info:
  description: |
    [www.ganttic.com](https://www.ganttic.com)
    
    # Description
    Ganttic API allows programmatic access to Ganttic resources, tasks, projects and users. It is intended to access your data programmatically for integration with your in-house applications or integrations with third party applications. Ganttic API follows RESTful style and uses JSON data format.

    Ganttic API root URL is https://planner.ganttic.com/api/v1. ‘v1’ is the version number. All requests to the API must me made over HTTPS. This reference lists all available endpoints and their descriptions. 

    # Authentication
    Each request to the ganttic API is authorized by an API token. This token must be sent with each request as a query parameter. An coount administrator can obtain the token from [the web interface](https://planner.ganttic.com) under Settings > API. If the authentication token is not contained in the request or is invalid then the server will return an Unauthorized (401) response.
    
    **NOTE** - When you already have a token and generate a new one then the old token will be discontinued immediately and will no longer function in any existing systems you might have running.
    
    # Data format
    All requests and responses are in JSON format. Nonexistent values are given as null values.
    
    ### Date & time formatting
    All dates and times used by the API are in the format of YYYY-MM-DD hh:mm:ss. In certain cases the API will not return a time component or will ignore the time component in the request. Details for specific requests are given below.
    
    ### Responses
    All successful requests will return a Success (200) response along with a response body if appropriate. Unsuccessful requests will return a 4XX or 5XX response code along with an error object containing the error code and error description.
    
    # Pagination
    Pagination is used in all GET requests that return an array of objects. Each response includes page and pageCount parameters. Page can be specified as a query parameter, pageCount is the number of total pages. Pages are 1-indexed and the page parameter defaults to 1. Page size is 50.

      
  version: "1.0.1"
  title: Ganttic API
  termsOfService: 'https://www.ganttic.com/terms-and-conditions'
  contact:
    email: info@ganttic.com
  x-logo:
    #url: 'https://redocly.github.io/redoc/petstore-logo.png'
    url: './ganttic-logo_sini-valge.svg'
    altText: Ganttic logo
tags:
  - name: resource
    description: A resource in Ganttic represents anyone or anything that should be planned or booked in order to complete a project. You can learn more about resources [here](https://www.ganttic.com/helpdesk/features/resources).
      <br/><br/>
      Each resource has a unique id that is generated automatically when adding a resource. A name is required when adding a resource. This is a human-friendly identifier for telling resources apart. However, resource names are not unique.
      <br/><br/>
      In addition, each resource has a status, either "resource" or "archived", the latter denoting an inactive resource. Archived resources are read-only. Each resource has a list of user generated notes and a list of data fields. You can read more about them in the data fields section.
      <br/><br/>
      When querying the list of resources you can use the includeNotes query paramter to specify whether you want to receive notes attached to resources and the includeEmptyDataFields parameter to specify whether each resource should contain data fields for which it does not have a non-null value.
      <br/><br/>
      When dealing with a lot of resources the list can be split into several pages. Each response contains the current page and the number of total pages. The required page number can be specified by the page query parameter.
  - name: task
    description: A task is an assignment for a resource, whether it's a booking, a job or something else. You can learn more about tasks [here](https://www.ganttic.com/helpdesk/features/tasks).
      <br/><br/>
      Each task has a unique id that is generated automatically when adding the task. When adding a task start and end properties are mandatory, representing the start and end times of the task respectively. The allDay parameter specifies the date format of the start and end. If it is an all day task then the format is YYYY-MM-DD, YYYY-MM-DD HH:MM otherwise. Each task can also have a human-friendly name, but this is not required.
      <br/><br/>
      Also mandatory is that the task is assigned to at least one resource via the resources parameter, which is a list of resource ids. You can fetch all available resources via a query to the /resources endpont, which you can read more about in the resources section. The task also has an optional projectId parameter which indicates that the task is a part of a specific project. Read more about projects in the projects section.
      <br/><br/>
      In addition, each task has a status, any of "task", "archived", "holiday" or "public_holiday", which in order represent a regular task, an inactive read-only task, a custom time-off (e.g. vacation or sick leave) and a public holiday. The difference between the last two is that public holiday tasks are automatically assigned to all resources while custom holidays are resource specific. You can read more about holydays [here](https://www.ganttic.com/helpdesk/features/tasks/holiday-and-public-holiday-tasks).
      Some other properties of a task are usedTime, which represents the time it actually took to complete the task in minutes; utilizationPercent, which represents the percentage of time that should be used to focus on that specific task in the given time span; creation time of the task; user generated notes; and data fields, which you can find more about in the data fields section.
      <br/><br/>
      Tasks can also have a recurring id. This means that the task is repeated at certain time intervals. When editing a task that is in a recurring set then all the tasks in the set will be modified accordingly. For example, if you set the start of a recurring task to be two hours later then all other tasks in the set will be moved forward two hours. To remove a task from the group leave the recurringId property empty when updating the task.
      <br/>
      NOTE - Deleting a recurring task will delete all other tasks in the set.
      <br/><br/>
      You can set several parameters to fine tune the response of your /tasks query. timeMin and timeMax are required parameters representing the interval for which you are querying tasks for. The includeArchived parameter can be used to include archived tasks in the response. includeNotes and includeEmptyDatafields parameters can be used to save bandwidth when notes and/or empty data fields are not required, they default to 0, and are not required if the data is not necessary. projectId, resourceId and recurringId parameters can be used alone or in combination to fine tune the response to only contain tasks for a specific project, resource or belonging to a specific recurring set.
      <br/><br/>
      You can also specify a time zone from [the IANA time zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) to convert the start and end times of the resulting tasks to the time zone of your choice. The default value for this is UTC.
      <br/><br/>
      When dealing with a lot of tasks the list can be split into several pages. Each response contains the current page and the number of total pages. The required page number can be specified by the page query parameter.
  - name: project
    description: Projects might be the reason you're planning your resources. In that case this is the place to look for projects that are ongoing. To see which tasks a certain project contains look into the tasks section. You can learn more about projects [here](https://www.ganttic.com/helpdesk/features/projects).
      <br/><br/>
      Each project has a unique id that is generated automatically when adding a resource. A name is required when adding a project. This is a human-friendly identifier for telling them apart. However, the names are not unique.
      <br/><br/>
      In addition, each project has a status, either "project" or "archived", the latter denoting a finished project. Archived projects are read-only. Each project has a list of user generated notes and a list of data fields. You can read more about them in the data fields section.
      <br/><br/>
      When querying the list of projects you can use the includeNotes query paramter to specify whether you want to receive notes attached to projects and the includeEmptyDataFields parameter to specify whether each project should contain data fields for which it does not have a non-null value.
      <br/><br/>
      When dealing with a lot of projects the list can be split into several pages. Each response contains the current page and the number of total pages. The required page number can be specified by the page query parameter.
  - name: user
    description: Users are the users of Ganttic, not resources. This is not mutually exclusive, however a separate resource must be created for the person to assign them tasks. Users are identified by the automatically generated id, but also a unique email address, which is used to log into Ganttic's web application.
      <br/><br/>
      First name and surname can be set for each user as well as a status of either "user" or "admin", which represents the basic permission set the user has in the application. The permissions can be tweaked further in the web interface.
      <br/><br/>
      In addition, the user has a created property showing when the user was added to the system.
      <br/><br/>
      When dealing with a lot of users the list can be split into several pages. Each response contains the current page and the number of total pages. The required page number can be specified by the page query parameter.
  - name: datafield
    description: "Resources, tasks and projects can all contain data fields. There are six types of data fields in total: users, dates, numbers, texts, links and listValues. The data fields are grouped by type in the dataFields object.<br/><br/>Data fields are account wide meaning that each resource/task/project has identical data fields to other resources/tasks/projects. However not each of them has a value for each data field. You can strip out empty data fields from list queries by setting the value of the includeEmptyDataFields to 0.<br/><br/>A user data field contains a user id. A date data field contains a date value. A number data field contains either an integer or a floating point value. A text data field contains a string value. A link data field contains a url and a title for the link. And a list type data field contains one of string type predefined values for that list.<br/><br/>You can use one of the queries below to fetch all data fields for resources/tasks/projects. Requests for resources/projects/tasks also contain data fields and their respective values for each resource/task/project. You can select whether to include data fields with no value via the includeEmptyDataFields query parameter."
servers:
  - url: https://yutiti.com/api/v1
paths:
  /resources:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - resource
      summary: Get all resources
      parameters:
        - name: includeNotes
          in: query
          description: Include notes in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: page
          in: query
          description: Page of resources to get
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          $ref: '#/components/responses/Resources'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/resources/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - datafield
      summary: Get all resource data fields
      responses:
        '200':
          $ref: '#/components/responses/DataFields'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /resource:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - resource
      summary: Create a resource
      requestBody:
        $ref: '#/components/requestBodies/ResourcePost'
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - resource
      summary: Modify a resource
      requestBody:
        $ref: '#/components/requestBodies/ResourcePost'
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/resource/{resourceId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Id of the resource
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - resource
      summary: Get resource details
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - resource
      summary: Delete a resource
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /tasks:
    parameters:
    - name: token
      in: query
      description: API token
      required: true
      schema:
        type: string
    get:
      tags:
        - task
      summary: Get all tasks matching query parameters
      parameters:
        - name: timeMin
          in: query
          description: Start date of task range (YYYY-MM-DD HH:MM)
          required: true
          schema:
            type: string
            format: date-time
        - name: timeMax
          in: query
          description: End date of task range (YYYY-MM-DD HH:MM)
          required: true
          schema:
            type: string
            format: date-time
        - name: includeArchived
          in: query
          description: Include archived tasks
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeNotes
          in: query
          description: Include notes in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: page
          in: query
          description: Page of tasks to get
          required: false
          schema:
            type: integer
            default: 1
        - name: projectId
          in: query
          description: Project id of the tasks
          required: false
          schema:
            type: string
            default: null
        - name: resourceId
          in: query
          description: Resource id of the tasks
          required: false
          schema:
            type: string
            default: null
        - name: recurringId
          in: query
          description: Recurring id of the tasks
          required: false
          schema:
            type: string
            default: null
        - name: timeZone
          in: query
          description: IANA name of the time zone into which resulting task start and end times are converted
          required: false
          schema:
            type: string
            default: null
      responses:
        '200':
          $ref: '#/components/responses/Tasks'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/tasks/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - datafield
      summary: Get all task data fields
      responses:
        '200':
          $ref: '#/components/responses/DataFields'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /task:
    parameters:
    - name: token
      in: query
      description: API token
      required: true
      schema:
        type: string
    post:
      tags:
        - task
      summary: Create a task
      parameters:
        - name: token
          in: query
          description: API token
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/TaskPost'
      responses:
        '200':
          $ref: '#/components/responses/Task'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - task
      summary: Modify a task
      parameters:
        - name: token
          in: query
          description: API token
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/TaskPatch'
      responses:
        '200':
          $ref: '#/components/responses/Task'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/task/{taskId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: Id of the task
        required: true
        schema:
          type: string
      - name: timeZone
        in: query
        description: IANA name of the time zone into which resulting task start and end times are converted
        required: false
        schema:
          type: string
          default: null
    get:
      tags:
        - task
      summary: Get task details
      responses:
        '200':
          $ref: '#/components/responses/Task'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - task
      summary: Delete a task
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /projects:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - project
      summary: Get all projects
      parameters:
        - name: includeNotes
          in: query
          description: Include notes in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: page
          in: query
          description: Page of projects to get
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          $ref: '#/components/responses/Projects'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/projects/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - datafield
      summary: Get all project data fields
      responses:
        '200':
          $ref: '#/components/responses/DataFields'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /project:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - project
      summary: Create a project
      requestBody:
        $ref: '#/components/requestBodies/ProjectPost'
      responses:
        '200':
          $ref: '#/components/responses/Project'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - project
      summary: Modify a project
      requestBody:
        $ref: '#/components/requestBodies/ProjectPatch'
      responses:
        '200':
          $ref: '#/components/responses/Project'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/project/{projectId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: projectId
        in: path
        description: Id of the project
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - project
      summary: Get project details
      responses:
        '200':
          $ref: '#/components/responses/Project'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - project
      summary: Delete a project
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /users:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - user
      summary: Get all users
      parameters:
        - name: page
          in: query
          description: Page of users to get
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /user:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - user
      summary: Create a user
      requestBody:
        $ref: '#/components/requestBodies/UserPost'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/user/{userId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: Id of the user
        required: true
        schema:
          type: string
    get:
      tags:
        - user
      summary: Get user details
      responses:
        '200':
          $ref: '#/components/responses/User'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
components:
  schemas:
    ResourceList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ResourceGet'
          description: A list of resources
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    Resource:
      type: object
      properties:
        name:
          type: string
          description: Name of the resource
        status:
          type: string
          enum: ["", archived]
          description: Status of the resource - empty for a regular resource
        dataFields:
          $ref: '#/components/schemas/DataFieldValues'
    ResourceGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        id:
          type: string
          description: Id of the resource
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: List of notes attached to the resource
        created:
          type: string
          format: date-time
          description: Date the resource was created (YYYY-MM-DD HH:MM)
    ResourcePost:
      allOf:
        - $ref: '#/components/schemas/Resource'
    ResourcePatch:
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        id:
          type: string
          description: Id of the resource
    TaskList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TaskGet'
          description: A list of tasks
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    Task:
      type: object
      properties:
        status:
          type: string
          enum: [task, archived, holiday, public_holiday]
          description: Status of the task
        projectId:
          type: string
          description: Id of the project the task belongs in
        name:
          type: string
          description: Name of the task
        resources:
          type: array
          items:
            type: string
          description: List of resources the task is connected to
        start:
          type: string
          format: date-time
          description: Start time of the task (YYYY-MM-DD HH:MM)
        end:
          type: string
          format: date-time
          description: End time of the task (YYYY-MM-DD HH:MM)
        allDay:
          type: boolean
          description: Whether this is a all day task (planning precision is day)
        usedTime:
          type: integer
          format: int64
          description: Task used time in minutes
        recurringId:
          type: string
          description: Recurring id of the task
        utilizationPercent:
          type: integer
          format: int32
          description: Utilization percent of the task
        dataFields:
          $ref: '#/components/schemas/DataFieldValues'
    TaskGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/Task'
      properties:
        id:
          type: string
          description: Id of the task
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: List of notes attached to the task
        created:
          type: string
          format: date-time
          description: Date the task was created (YYYY-MM-DD HH:MM)
    TaskPost:
      type: object
      allOf:
        - $ref: '#/components/schemas/Task'
      properties:
        timeZone:
          type: string
          default: null
          description: IANA name of the time zone of the task's start and end times
      required:
        - start
        - end
        - resources
    TaskPatch:
      type: object
      allOf:
        - $ref: '#/components/schemas/Task'
      properties:
        id:
          type: string
          description: Id of the task
        timeZone:
          type: string
          default: null
          description: IANA name of the time zone of the task's start and end times
      required:
        - id
        - start
        - end
        - resources
    ProjectList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectGet'
          description: A list of projects
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    Project:
      type: object
      properties:
        name:
          type: string
          description: Name of the project
        status:
          type: string
          enum: ["", archived]
          description: Status of the project - empty for a regular project
        dataFields:
          $ref: '#/components/schemas/DataFieldValues'
    ProjectGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/Project'
      properties:
        id:
          type: string
          description: Id of the project
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: List of notes attached to the project
        created:
          type: string
          format: date-time
          description: Date the project was created (YYYY-MM-DD HH:MM)
    ProjectPost:
      type: object
      allOf:
        - $ref: '#/components/schemas/Project'
    ProjectPatch:
      type: object
      allOf:
        - $ref: '#/components/schemas/Project'
      properties:
        id:
          type: string
          description: Id of the project
    UserList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserGet'
          description: A list of users
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    User:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the user
        surname:
          type: string
          description: Surname of the user
        email:
          type: string
          format: email
          description: Email of the user
        type:
          type: string
          enum: [user, admin]
          description: Type of the user
    UserGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
      properties:
        id:
          type: string
          description: Id of the user
        created:
          type: string
          format: date-time
          description: Date the user was created (YYYY-MM-DD HH:MM)
    UserPost:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
    DataFieldValues:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldUserValue'
          description: List of user type data fields
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldDateValue'
          description: List of date type data fields
        numbers:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldNumberValue'
          description: List of number type data fields
        texts:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldTextValue'
          description: List of text type data fields
        links:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldLinkValue'
          description: List of link type data fields
        listValues:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldListValue'
          description: List of list type data fields
    DataFieldValue:
      type: object
      properties:
        id:
          type: string
          description: Id of the data field
    DataFieldUserValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        userId:
          type: string
          description: Id of the user
    DataFieldDateValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        date:
          type: string
          format: date-time
          description: Date value (YYYY-MM-DD HH:MM)
    DataFieldNumberValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        number:
          type: integer
          format: int64
          description: Number value
    DataFieldTextValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        text:
          type: string
          description: Text value
    DataFieldLinkValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        url:
          type: string
          format: url
          description: Url value
        text:
          type: string
          description: Text value
    DataFieldListValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        listId:
          type: string
          description: Id of the list
    DataFields:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldUser'
          description: List of user type data fields
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldDate'
          description: List of date type data fields
        numbers:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldNumber'
          description: List of number type data fields
        texts:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldText'
          description: List of text type data fields
        links:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldLink'
          description: List of link type data fields
        listValues:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldList'
          description: List of list type data fields
    DataField:
      type: object
      properties:
        id:
          type: string
          description: Id of the data field
        name:
          type: string
          description: Name of the data field
    DataFieldUser:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldDate:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldNumber:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldText:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldLink:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldList:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
      properties:
        values:
          type: array
          description: Id of the list
          items:
            $ref: '#/components/schemas/DataFieldListOption'
    DataFieldListOption:
      type: object
      properties:
        id:
          type: string
          description: Id of the list option
        value:
          type: string
          description: Value of the list option
    Note:
      type: object
      properties:
        id:
          type: string
          description: Id of the note
        userId:
          type: string
          description: Id of the user that created the note
        note:
          type: string
          description: Contents of the note
        created:
          type: string
          format: date-time
          description: Date the note was created (YYYY-MM-DD HH:MM)
    Error:
      type: object
      properties:
        errorCode:
          type: integer
          description: Error code
        message:
          type: string
          description: Error description
  requestBodies:
    TaskPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskPost'
    TaskPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskPatch'
    ResourcePost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourcePost'
    ResourcePatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourcePatch'
    ProjectPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectPost'
    ProjectPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectPatch'
    UserPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPost'
  responses:
    Task:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskGet'
    Tasks:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskList'
    Resource:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceGet'
    Resources:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceList'
    Project:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectGet'
    Projects:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectList'
    User:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserGet'
    Users:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserList'
    DataFields:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataFields'
    Error:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'