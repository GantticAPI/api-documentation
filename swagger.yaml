openapi: 3.0.0
info:
  description: |
    [www.ganttic.com](https://www.ganttic.com)
    <br/><br/>
    **Authentication**: TODO
    <br/><br/>
    **Data structure**: TODO
    <br/><br/>
    **Other stuff**
  version: "1.0.1"
  title: Ganttic API
  termsOfService: 'https://www.ganttic.com/terms-and-conditions'
  contact:
    email: info@ganttic.com
tags:
  - name: task
    description: Operations on tasks
  - name: resource
    description: Operations on resources
  - name: project
    description: Operations on projects
  - name: user
    description: Operations on users
paths:
  /tasks:
    parameters:
    - name: token
      in: query
      description: API token
      required: true
      schema:
        type: string
    get:
      tags:
        - task
      summary: Get all tasks matching query parameters
      parameters:
        - name: timeMin
          in: query
          description: Start date of task range (YYYY-MM-DD HH:MM)
          required: true
          schema:
            type: string
            format: date-time
        - name: timeMax
          in: query
          description: End date of task range (YYYY-MM-DD HH:MM)
          required: true
          schema:
            type: string
            format: date-time
        - name: includeArchived
          in: query
          description: Include archived tasks
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeNotes
          in: query
          description: Include notes in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: projectId
          in: query
          description: Project id of the tasks
          required: false
          schema:
            type: string
        - name: resourceId
          in: query
          description: Resource id of the tasks
          required: false
          schema:
            type: string
        - name: recurringId
          in: query
          description: Recurring id of the tasks
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/tasks/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - task
      summary: Get all task data fields
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataFields'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /task:
    parameters:
    - name: token
      in: query
      description: API token
      required: true
      schema:
        type: string
    post:
      tags:
        - task
      summary: Create a task
      parameters:
        - name: token
          in: query
          description: API token
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/Task'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - task
      summary: Modify a task
      parameters:
        - name: token
          in: query
          description: API token
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/Task'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/task/{taskId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: Id of the task
        required: true
        schema:
          type: string
    get:
      tags:
        - task
      summary: Get task details
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetails'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - task
      summary: Delete a task
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /resources:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - resource
      summary: Get all resources
      parameters:
        - name: includeNotes
          in: query
          description: Include notes in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceDetails'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/resources/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - resource
      summary: Get all resource data fields
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataFields'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /resource:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - resource
      summary: Create a resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - resource
      summary: Modify a resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/resource/{resourceId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: ID of the resource
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - resource
      summary: Get resource details
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDetails'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - resource
      summary: Delete a resource
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /projects:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - project
      summary: Get all projects
      parameters:
        - name: includeNotes
          in: query
          description: Include notes in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDetails'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/projects/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - project
      summary: Get all project data fields
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataFields'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /project:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - project
      summary: Create a project
      requestBody:
        $ref: '#/components/requestBodies/Project'
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - project
      summary: Modify a project
      requestBody:
        $ref: '#/components/requestBodies/Project'
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/project/{projectId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: projectId
        in: path
        description: ID of the project
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - project
      summary: Get project details
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - project
      summary: Delete a project
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /users:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - user
      summary: Get all users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/user/{userId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: Id of the user
        required: true
        schema:
          type: string
    get:
      tags:
        - user
      summary: Get user details
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
components:
  schemas:
    Resource:
      type: object
      properties:
        id:
          type: string
          description: Id of the resource
        name:
          type: string
          description: Name of the resource
        status:
          type: string
          enum: ["", archived]
          description: Status of the resource - empty for a regular resource
        dataFields:
          $ref: '#/components/schemas/DataFields'
    ResourceDetails:
      type: object
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        created:
          type: string
          format: date-time
          description: Date the resource was created (YYYY-MM-DD HH:MM)
    Task:
      type: object
      properties:
        id:
          type: string
          description: Id of the task
        status:
          type: string
          enum: ["", archived]
          description: Status of the task - empty for a regular task
        projectId:
          type: string
          description: Id of the project the task belongs in
        name:
          type: string
          description: Name of the task
        resources:
          type: array
          items:
            type: string
          description: List of resources the task is connected to
        start:
          type: string
          format: date-time
          description: Start time of the task (YYYY-MM-DD HH:MM)
        end:
          type: string
          format: date-time
          description: End time of the task (YYYY-MM-DD HH:MM)
        allDay:
          type: boolean
          description: Whether this is a all day task (planning precision is day)
        usedTime:
          type: integer
          format: int64
          description: Task used time in minutes
        recurringId:
          type: string
          description: Recurring id of the task
        dataFields:
          $ref: '#/components/schemas/DataFields'
        created:
          type: string
          format: date-time
          description: Date the task was created (YYYY-MM-DD HH:MM)
    TaskDetails:
      type: object
      allOf:
        - $ref: '#/components/schemas/Task'
      properties:
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: List of notes attached to the task
    Project:
      type: object
      properties:
        id:
          type: string
          description: Id of the project
        name:
          type: string
          description: Name of the project
        status:
          type: string
          enum: ["", archived]
          description: Status of the project - empty for a regular project
        dataFields:
          $ref: '#/components/schemas/DataFields'
    ProjectDetails:
      type: object
      allOf:
        - $ref: '#/components/schemas/Project'
      properties:
        created:
          type: string
          format: date-time
          description: Date the project was created (YYYY-MM-DD HH:MM)
    User:
      type: object
      properties:
        id:
          type: string
          description: Id of the user
        firstName:
          type: string
          description: First name of the user
        surname:
          type: string
          description: Surname of the user
        email:
          type: string
          description: Email of the user
        type:
          type: string
          enum: [user, admin]
          description: Type of the user
        created:
          type: string
          format: date-time
          description: Date the user was created (YYYY-MM-DD HH:MM)
    DataFields:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldUser'
          description: List of user type data fields
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldDate'
          description: List of date type data fields
        numbers:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldNumber'
          description: List of number type data fields
        texts:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldText'
          description: List of text type data fields
        links:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldLink'
          description: List of link type data fields
        listValues:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldListValue'
          description: List of list type data fields
    DataField:
      type: object
      properties:
        id:
          type: string
          description: Id of the data field
    DataFieldUser:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
      properties:
        userId:
          type: string
          description: Id of the user
    DataFieldDate:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
      properties:
        date:
          type: string
          format: date-time
          description: Date value (YYYY-MM-DD HH:MM)
    DataFieldNumber:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
      properties:
        number:
          type: integer
          format: int64
          description: Number value
    DataFieldText:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
      properties:
        text:
          type: string
          description: Text value
    DataFieldLink:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
      properties:
        url:
          type: string
          format: url
          description: Url value
        text:
          type: string
          description: Text value
    DataFieldListValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
      properties:
        listId:
          type: string
          description: Id of the list
    Note:
      type: object
      properties:
        id:
          type: string
          description: Id of the note
        userId:
          type: string
          description: Id of the user that created the note
        note:
          type: string
          description: Contents of the note
        dateTime:
          type: string
          format: date-time
          description: Date the note was created (YYYY-MM-DD HH:MM)
    Error:
      type: object
      properties:
        errorCode:
          type: integer
          description: Error code
        message:
          type: string
          description: Error description
  requestBodies:
    Task:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
    Resource:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Resource'
    Project:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Project'
  responses:
    Error:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    api_key:
      type: apiKey
      name: token
      in: query