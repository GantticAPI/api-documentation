openapi: 3.0.0
info:
  description: |
    [www.ganttic.com](https://www.ganttic.com)
    <br/><br/>
    **Authentication**: TODO
    <br/><br/>
    **Data structure**: TODO
    <br/><br/>
    **Other stuff**
  version: "1.0.1"
  title: Ganttic API
  termsOfService: 'https://www.ganttic.com/terms-and-conditions'
  contact:
    email: info@ganttic.com
tags:
  - name: task
    description: Operations on tasks
  - name: resource
    description: Operations on resources
  - name: project
    description: Operations on projects
  - name: user
    description: Operations on users
paths:
  /tasks:
    parameters:
    - name: token
      in: query
      description: API token
      required: true
      schema:
        type: string
    get:
      tags:
        - task
      summary: Get all tasks matching query parameters
      parameters:
        - name: timeMin
          in: query
          description: Start date of task range (YYYY-MM-DD HH:MM)
          required: true
          schema:
            type: string
            format: date-time
        - name: timeMax
          in: query
          description: End date of task range (YYYY-MM-DD HH:MM)
          required: true
          schema:
            type: string
            format: date-time
        - name: includeArchived
          in: query
          description: Include archived tasks
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeNotes
          in: query
          description: Include notes in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: page
          in: query
          description: Page of tasks to get
          required: false
          schema:
            type: integer
            default: 1
        - name: projectId
          in: query
          description: Project id of the tasks
          required: false
          schema:
            type: string
        - name: resourceId
          in: query
          description: Resource id of the tasks
          required: false
          schema:
            type: string
        - name: recurringId
          in: query
          description: Recurring id of the tasks
          required: false
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Tasks'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/tasks/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - task
      summary: Get all task data fields
      responses:
        '200':
          $ref: '#/components/responses/DataFields'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /task:
    parameters:
    - name: token
      in: query
      description: API token
      required: true
      schema:
        type: string
    post:
      tags:
        - task
      summary: Create a task
      parameters:
        - name: token
          in: query
          description: API token
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/TaskPost'
      responses:
        '200':
          $ref: '#/components/responses/Task'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - task
      summary: Modify a task
      parameters:
        - name: token
          in: query
          description: API token
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/TaskPatch'
      responses:
        '200':
          $ref: '#/components/responses/Task'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/task/{taskId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: Id of the task
        required: true
        schema:
          type: string
    get:
      tags:
        - task
      summary: Get task details
      responses:
        '200':
          $ref: '#/components/responses/Task'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - task
      summary: Delete a task
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /resources:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - resource
      summary: Get all resources
      parameters:
        - name: includeNotes
          in: query
          description: Include notes in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: page
          in: query
          description: Page of resources to get
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          $ref: '#/components/responses/Resources'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/resources/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - resource
      summary: Get all resource data fields
      responses:
        '200':
          $ref: '#/components/responses/DataFields'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /resource:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - resource
      summary: Create a resource
      requestBody:
        $ref: '#/components/requestBodies/ResourcePost'
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - resource
      summary: Modify a resource
      requestBody:
        $ref: '#/components/requestBodies/ResourcePost'
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/resource/{resourceId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: resourceId
        in: path
        description: Id of the resource
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - resource
      summary: Get resource details
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - resource
      summary: Delete a resource
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /projects:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - project
      summary: Get all projects
      parameters:
        - name: includeNotes
          in: query
          description: Include notes in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: includeEmptyDataFields
          in: query
          description: Include data fields for which the task has no value in result
          required: false
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - name: page
          in: query
          description: Page of projects to get
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          $ref: '#/components/responses/Projects'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/projects/datafields':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - project
      summary: Get all project data fields
      responses:
        '200':
          $ref: '#/components/responses/DataFields'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /project:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - project
      summary: Create a project
      requestBody:
        $ref: '#/components/requestBodies/ProjectPost'
      responses:
        '200':
          $ref: '#/components/responses/Project'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    patch:
      tags:
        - project
      summary: Modify a project
      requestBody:
        $ref: '#/components/requestBodies/ProjectPatch'
      responses:
        '200':
          $ref: '#/components/responses/Project'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/project/{projectId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: projectId
        in: path
        description: Id of the project
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - project
      summary: Get project details
      responses:
        '200':
          $ref: '#/components/responses/Project'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - project
      summary: Delete a project
      responses:
        '200':
          description: Successful operation
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /users:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    get:
      tags:
        - user
      summary: Get all users
      parameters:
        - name: page
          in: query
          description: Page of users to get
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  /user:
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
    post:
      tags:
        - user
      summary: Create a user
      requestBody:
        $ref: '#/components/requestBodies/UserPost'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
  '/user/{userId}':
    parameters:
      - name: token
        in: query
        description: API token
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: Id of the user
        required: true
        schema:
          type: string
    get:
      tags:
        - user
      summary: Get user details
      responses:
        '200':
          $ref: '#/components/responses/User'
        '4XX':
          $ref: '#/components/responses/Error'
        '5XX':
          $ref: '#/components/responses/Error'
components:
  schemas:
    ResourceList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ResourceGet'
          description: A list of resources
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    Resource:
      type: object
      properties:
        name:
          type: string
          description: Name of the resource
        status:
          type: string
          enum: ["", archived]
          description: Status of the resource - empty for a regular resource
        dataFields:
          $ref: '#/components/schemas/DataFieldValues'
    ResourceGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        id:
          type: string
          description: Id of the resource
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: List of notes attached to the resource
        created:
          type: string
          format: date-time
          description: Date the resource was created (YYYY-MM-DD HH:MM)
    ResourcePost:
      allOf:
        - $ref: '#/components/schemas/Resource'
    ResourcePatch:
      allOf:
        - $ref: '#/components/schemas/Resource'
      properties:
        id:
          type: string
          description: Id of the resource
    TaskList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TaskGet'
          description: A list of tasks
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    Task:
      type: object
      properties:
        status:
          type: string
          enum: ["", archived]
          description: Status of the task - empty for a regular task
        projectId:
          type: string
          description: Id of the project the task belongs in
        name:
          type: string
          description: Name of the task
        resources:
          type: array
          items:
            type: string
          description: List of resources the task is connected to
        start:
          type: string
          format: date-time
          description: Start time of the task (YYYY-MM-DD HH:MM)
        end:
          type: string
          format: date-time
          description: End time of the task (YYYY-MM-DD HH:MM)
        allDay:
          type: boolean
          description: Whether this is a all day task (planning precision is day)
        usedTime:
          type: integer
          format: int64
          description: Task used time in minutes
        recurringId:
          type: string
          description: Recurring id of the task
        utilizationPercent:
          type: integer
          format: int32
          description: Utilization percent of the task
        dataFields:
          $ref: '#/components/schemas/DataFieldValues'
    TaskGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/Task'
      properties:
        id:
          type: string
          description: Id of the task
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: List of notes attached to the task
        created:
          type: string
          format: date-time
          description: Date the task was created (YYYY-MM-DD HH:MM)
    TaskPost:
      type: object
      allOf:
        - $ref: '#/components/schemas/Task'
    TaskPatch:
      type: object
      allOf:
        - $ref: '#/components/schemas/Task'
      properties:
        id:
          type: string
          description: Id of the task
    ProjectList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ProjectGet'
          description: A list of projects
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    Project:
      type: object
      properties:
        name:
          type: string
          description: Name of the project
        status:
          type: string
          enum: ["", archived]
          description: Status of the project - empty for a regular project
        dataFields:
          $ref: '#/components/schemas/DataFieldValues'
    ProjectGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/Project'
      properties:
        id:
          type: string
          description: Id of the project
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
          description: List of notes attached to the project
        created:
          type: string
          format: date-time
          description: Date the project was created (YYYY-MM-DD HH:MM)
    ProjectPost:
      type: object
      allOf:
        - $ref: '#/components/schemas/Project'
    ProjectPatch:
      type: object
      allOf:
        - $ref: '#/components/schemas/Project'
      properties:
        id:
          type: string
          description: Id of the project
    UserList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserGet'
          description: A list of users
        page:
          type: integer
          description: Current page
        pageCount:
          type: integer
          description: Number of total pages
    User:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the user
        surname:
          type: string
          description: Surname of the user
        email:
          type: string
          format: email
          description: Email of the user
        type:
          type: string
          enum: [user, admin]
          description: Type of the user
    UserGet:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
      properties:
        id:
          type: string
          description: Id of the user
        created:
          type: string
          format: date-time
          description: Date the user was created (YYYY-MM-DD HH:MM)
    UserPost:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
    DataFieldValues:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldUserValue'
          description: List of user type data fields
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldDateValue'
          description: List of date type data fields
        numbers:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldNumberValue'
          description: List of number type data fields
        texts:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldTextValue'
          description: List of text type data fields
        links:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldLinkValue'
          description: List of link type data fields
        listValues:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldListValue'
          description: List of list type data fields
    DataFieldValue:
      type: object
      properties:
        id:
          type: string
          description: Id of the data field
    DataFieldUserValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        userId:
          type: string
          description: Id of the user
    DataFieldDateValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        date:
          type: string
          format: date-time
          description: Date value (YYYY-MM-DD HH:MM)
    DataFieldNumberValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        number:
          type: integer
          format: int64
          description: Number value
    DataFieldTextValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        text:
          type: string
          description: Text value
    DataFieldLinkValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        url:
          type: string
          format: url
          description: Url value
        text:
          type: string
          description: Text value
    DataFieldListValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataFieldValue'
      properties:
        listId:
          type: string
          description: Id of the list
    DataFields:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldUser'
          description: List of user type data fields
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldDate'
          description: List of date type data fields
        numbers:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldNumber'
          description: List of number type data fields
        texts:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldText'
          description: List of text type data fields
        links:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldLink'
          description: List of link type data fields
        listValues:
          type: array
          items:
            $ref: '#/components/schemas/DataFieldList'
          description: List of list type data fields
    DataField:
      type: object
      properties:
        id:
          type: string
          description: Id of the data field
        name:
          type: string
          description: Name of the data field
    DataFieldUser:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldDate:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldNumber:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldText:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldLink:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
    DataFieldList:
      type: object
      allOf:
        - $ref: '#/components/schemas/DataField'
      properties:
        values:
          type: array
          description: Id of the list
          items:
            $ref: '#/components/schemas/DataFieldListOption'
    DataFieldListOption:
      type: object
      properties:
        id:
          type: string
          description: Id of the list option
        value:
          type: string
          description: Value of the list option
    Note:
      type: object
      properties:
        id:
          type: string
          description: Id of the note
        userId:
          type: string
          description: Id of the user that created the note
        note:
          type: string
          description: Contents of the note
        dateTime:
          type: string
          format: date-time
          description: Date the note was created (YYYY-MM-DD HH:MM)
    Error:
      type: object
      properties:
        errorCode:
          type: integer
          description: Error code
        message:
          type: string
          description: Error description
  requestBodies:
    TaskPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskPost'
    TaskPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskPatch'
    ResourcePost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourcePost'
    ResourcePatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourcePatch'
    ProjectPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectPost'
    ProjectPatch:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectPatch'
    UserPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPost'
  responses:
    Task:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskGet'
    Tasks:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskList'
    Resource:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceGet'
    Resources:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceList'
    Project:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectGet'
    Projects:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectList'
    User:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserGet'
    Users:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserList'
    DataFields:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataFields'
    Error:
      description: An error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    api_key:
      type: apiKey
      name: token
      in: query